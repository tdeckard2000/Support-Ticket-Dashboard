import { Component, OnDestroy, OnInit } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { HttpService, IDomain, IEvent, IPeople } from '../services/http.service';
import { ModalService } from '../services/modal.service';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-create-event',
  templateUrl: './create-event.component.html',
  styleUrls: ['./create-event.component.scss']
})
export class CreateEventComponent implements OnInit, OnDestroy {

  public downtimeEvent = false;
  public domains$: BehaviorSubject<IDomain[]> = new BehaviorSubject([] as IDomain[]);
  public formGroup: FormGroup = {} as FormGroup;
  public peopleDropdownList$: BehaviorSubject<IPeople[]> = new BehaviorSubject([] as IPeople[]);
  public peopleSelected: IPeople[] = [];
  public subDomains$: BehaviorSubject<string[]> = new BehaviorSubject([] as string[]);
  public savingEvent = false;
  private _people: IPeople[] = [];
  private _subscriptions: any[] = [];

  constructor( private modalService: ModalService, private httpService:HttpService, private fb: FormBuilder) { }

  ngOnInit(): void {
    this._subscriptions.push(this.httpService.getDomains().subscribe(res => {
      this.domains$.next(res);
    }))

    this._subscriptions.push(this.httpService.getPeople().subscribe(res => {
      this.peopleDropdownList$.next(res);
      this._people = res;
    }))

    this.formGroup = this.fb.group({
      domain: [null, Validators.required],
      subDomain: {value: null, disabled: true},
      owners: [null],
      description: ['']
    })

    this.formGroup.get('domain')?.valueChanges.subscribe((selectedDomain) => {
      const subs = this.domains$.getValue().find(domain => domain.name === selectedDomain)?.subDomains;
      this.formGroup.get('subDomain')?.enable();
      if(subs?.length) {
        this.subDomains$.next(subs);
        this.formGroup.get('subDomain')?.setValue(subs[0]);
      };
    });

    this.formGroup.get('owners')?.valueChanges.subscribe((personId) => {
      const selectedPerson = this.peopleDropdownList$.getValue().find(e => e._id == personId);
      if (selectedPerson) {
        this.peopleSelected.push(selectedPerson);
        this.removePersonFromDropdown(selectedPerson);
      }
    })
  }

  addPersonToDropdown(person: IPeople) {
    if(!this.peopleDropdownList$.getValue().includes(person)) {
      const currentList = this.peopleDropdownList$.getValue();
      currentList.push(person)
      this.peopleDropdownList$.next(currentList);
      this.formGroup.get('owners')?.setValue('--')
    }
  }

  removePersonFromDropdown(person: IPeople) {
    const filtered = this.peopleDropdownList$.getValue().filter(e => e !== person);
    this.peopleDropdownList$.next(filtered);
  }

  onRemovePerson(person: IPeople) {
    this.peopleSelected = this.peopleSelected.filter(e => e !== person)
    this.addPersonToDropdown(person);
  }

  onDowntimeEvent() {
    this.downtimeEvent = !this.downtimeEvent;
  }

  onCancel() {
    this.modalService.closeModal('event')
  }

  onCreate() {
    this.savingEvent = true;
    const newEvent: IEvent = {
      _id: Math.floor(Math.random()*1000), //_id typically generated by DB
      domain: this.formGroup.value.domain,
      subDomain: this.formGroup.value.subDomain,
      owners: this.peopleSelected,
      description: this.formGroup.value?.description,
      downtimeEvent: this.downtimeEvent
    }
    this.httpService.createEvent(newEvent).subscribe(res => {
      if(res) {
        this.savingEvent = false;
        this.httpService.getEvents();
        this.modalService.closeModal('event');
      }
    })
  }

  ngOnDestroy() {
    this._subscriptions.forEach(subscription => {
      subscription.unsubscribe()
    });
  }

}
